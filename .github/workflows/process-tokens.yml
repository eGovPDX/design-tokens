name: Process Design Tokens

on:
  pull_request:
    branches:
      - main
    paths:
      - 'design-tokens.json'
  push:
    branches:
      - main
    paths:
      - 'design-tokens.json'

jobs:
  process-tokens:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Process tokens
        id: process
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          FIGMA_ACCESS_TOKEN: ${{ secrets.FIGMA_ACCESS_TOKEN }}
        run: |
          # Debug: Show current directory and files
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          
          # Debug: Show package.json if it exists
          if [ -f "package.json" ]; then
            echo "package.json contents:"
            cat package.json
            echo "process-tokens script definition:"
            node -e "console.log(require('./package.json').scripts['process-tokens'] || 'Script not found')"
          else
            echo "package.json not found!"
          fi
          
          # Debug: Show available pnpm commands
          echo "Available pnpm commands:"
          pnpm run
          
          # Process tokens with debug output
          echo "Running process-tokens command..."
          OUTPUT=$(pnpm run process-tokens -- --source file --input design-tokens.json --output ./output 2>&1)
          EXIT_CODE=$?
          echo "Command output:"
          echo "$OUTPUT"
          echo "Exit code: $EXIT_CODE"
          
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Failed to run process-tokens command"
            echo "::error::Command output: $OUTPUT"
            exit 1
          fi
          
          # Validate output
          echo "Running validate command..."
          VALIDATE_OUTPUT=$(pnpm run validate 2>&1)
          VALIDATE_EXIT_CODE=$?
          echo "Validate command output:"
          echo "$VALIDATE_OUTPUT"
          echo "Validate exit code: $VALIDATE_EXIT_CODE"
          
          if [ $VALIDATE_EXIT_CODE -ne 0 ]; then
            echo "::error::Failed to run validate command"
            echo "::error::Command output: $VALIDATE_OUTPUT"
            exit 1
          fi
          
          # Count changes and analyze tokens
          CHANGES=$(git diff --name-only output/ | wc -l)
          echo "changes=$CHANGES" >> $GITHUB_OUTPUT
          
          # Analyze token changes
          TOKEN_ANALYSIS=$(node -e "
            const fs = require('fs');
            const path = require('path');
            
            const oldTokens = JSON.parse(fs.readFileSync('design-tokens.json', 'utf8'));
            const newTokens = JSON.parse(fs.readFileSync('output/design_tokens.json', 'utf8'));
            
            const getTokenCounts = (tokens) => ({
              colors: Object.keys(tokens.colors || {}).length,
              typography: Object.keys(tokens.typography || {}).length,
              spacing: Object.keys(tokens.spacing || {}).length
            });
            
            const oldCounts = getTokenCounts(oldTokens);
            const newCounts = getTokenCounts(newTokens);
            
            const changes = {
              added: {
                colors: newCounts.colors - oldCounts.colors,
                typography: newCounts.typography - oldCounts.typography,
                spacing: newCounts.spacing - oldCounts.spacing
              }
            };
            
            console.log(JSON.stringify(changes));
          ")
          echo "token_analysis=$TOKEN_ANALYSIS" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config --global user.name 'Design Tokens Bot'
          git config --global user.email 'design-tokens-bot@portland.gov'

      - name: Update PR with processed tokens
        if: steps.process.outputs.changes != '0'
        run: |
          # Copy processed files
          cp -r output/* .
          
          # Commit changes
          git add .
          git commit -m "Update processed design tokens"
          
          # Push changes to PR branch
          git push origin ${{ github.head_ref }}

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read the processed files
            const jsonContent = fs.readFileSync(path.join(process.cwd(), 'output/design_tokens.json'), 'utf8');
            const cssContent = fs.readFileSync(path.join(process.cwd(), 'output/design_tokens.css'), 'utf8');
            
            // Parse token analysis
            const tokenAnalysis = JSON.parse('${{ steps.process.outputs.token_analysis }}');
            
            // Create comment
            const comment = '### Design Tokens Processing Results\n\n' +
              '‚úÖ Tokens processed successfully!\n\n' +
              '**Token Changes:**\n' +
              (tokenAnalysis.added.colors > 0 ? `- Added ${tokenAnalysis.added.colors} color tokens\n` : '') +
              (tokenAnalysis.added.typography > 0 ? `- Added ${tokenAnalysis.added.typography} typography tokens\n` : '') +
              (tokenAnalysis.added.spacing > 0 ? `- Added ${tokenAnalysis.added.spacing} spacing tokens\n` : '') +
              '\n' +
              '**Preview:**\n' +
              '```css\n' +
              `${cssContent.split('\n').slice(0, 20).join('\n')}\n` +
              '...\n' +
              '```\n\n' +
              '*Note: Only showing first 20 lines of CSS. Full changes can be viewed in the PR.*\n\n' +
              '**Files Changed:**\n' +
              '- `design_tokens.json`\n' +
              '- `design_tokens.css`\n\n' +
              '**Next Steps:**\n' +
              '1. Review the changes\n' +
              '2. Check the token usage examples\n' +
              '3. Approve and merge if everything looks good';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: comment
            });

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: ""
          custom_payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "üî® Design Token Processing ${{ job.status == 'success' && '‚úÖ' || '‚ùå' }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Job:*\n${{ github.workflow }} / ${{ github.job }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Event:*\n${{ github.event_name }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Error Details:*\n```${{ toJSON(job.steps.*.outcome) }}```"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
